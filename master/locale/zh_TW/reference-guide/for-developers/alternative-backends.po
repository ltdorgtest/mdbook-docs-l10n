msgid ""
msgstr ""
"Project-Id-Version: mdBook Documentation\n"
"POT-Creation-Date: 2025-09-30T06:22:51Z\n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: src/for_developers/backends.md:1
msgid "Alternative backends"
msgstr ""

#: src/for_developers/backends.md:3
msgid ""
"A \"backend\" is simply a program which `mdbook` will invoke during the book "
"rendering process. This program is passed a JSON representation of the book "
"and configuration information via `stdin`. Once the backend receives this "
"information it is free to do whatever it wants."
msgstr ""

#: src/for_developers/backends.md:8
msgid ""
"See [Configuring Renderers](../format/configuration/renderers.md) for more "
"information about using backends."
msgstr ""

#: src/for_developers/backends.md:10
msgid ""
"The community has developed several backends. See the [Third Party Plugins]"
"(https://github.com/rust-lang/mdBook/wiki/Third-party-plugins) wiki page for "
"a list of available backends."
msgstr ""

#: src/for_developers/backends.md:13
msgid "Setting up"
msgstr ""

#: src/for_developers/backends.md:15
msgid ""
"This page will step you through creating your own alternative backend in the "
"form of a simple word counting program. Although it will be written in Rust, "
"there's no reason why it couldn't be accomplished using something like "
"Python or Ruby."
msgstr ""

#: src/for_developers/backends.md:19
msgid ""
"First you'll want to create a new binary program and add `mdbook-renderer` "
"as a dependency."
msgstr ""

#: src/for_developers/backends.md:28
msgid ""
"When our `mdbook-wordcount` plugin is invoked, `mdbook` will send it a JSON "
"version of [`RenderContext`](https://docs.rs/mdbook-renderer/latest/"
"mdbook_renderer/struct.RenderContext.html) via our plugin's `stdin`. For "
"convenience, there's a [`RenderContext::from_json()`](https://docs.rs/mdbook-"
"renderer/latest/mdbook_renderer/struct.RenderContext.html#method.from_json) "
"constructor which will load a `RenderContext`."
msgstr ""

#: src/for_developers/backends.md:32
msgid "This is all the boilerplate necessary for our backend to load the book."
msgstr ""

#: src/for_developers/backends.md:35
msgid "// src/main.rs\n"
msgstr ""

#: src/for_developers/backends.md:45
msgid ""
"**Note:** The `RenderContext` contains a `version` field. This lets backends "
"figure out whether they are compatible with the version of `mdbook` it's "
"being called by. This `version` comes directly from the corresponding field "
"in `mdbook`'s `Cargo.toml`."
msgstr ""

#: src/for_developers/backends.md:50
msgid ""
"It is recommended that backends use the [`semver`](https://crates.io/crates/"
"semver) crate to inspect this field and emit a warning if there may be a "
"compatibility issue."
msgstr ""

#: src/for_developers/backends.md:53
msgid "Inspecting the book"
msgstr ""

#: src/for_developers/backends.md:55
msgid ""
"Now our backend has a copy of the book, lets count how many words are in "
"each chapter!"
msgstr ""

#: src/for_developers/backends.md:58
msgid ""
"Because the `RenderContext` contains a [`Book`](https://docs.rs/mdbook-"
"renderer/latest/mdbook_renderer/book/struct.Book.html) field (`book`), and a "
"`Book` has the [`Book::iter()`](https://docs.rs/mdbook-renderer/latest/"
"mdbook_renderer/book/struct.Book.html#method.iter) method for iterating over "
"all items in a `Book`, this step turns out to be just as easy as the first."
msgstr ""

#: src/for_developers/backends.md:71
msgid "\"{}: {}\""
msgstr ""

#: src/for_developers/backends.md:82
msgid "Enabling the backend"
msgstr ""

#: src/for_developers/backends.md:84
msgid ""
"Now we've got the basics running, we want to actually use it. First, install "
"the program."
msgstr ""

#: src/for_developers/backends.md:91
msgid ""
"Then `cd` to the particular book you'd like to count the words of and update "
"its `book.toml` file."
msgstr ""

#: src/for_developers/backends.md:105
msgid ""
"When it loads a book into memory, `mdbook` will inspect your `book.toml` "
"file to try and figure out which backends to use by looking for all `output."
"*` tables. If none are provided it'll fall back to using the default HTML "
"renderer."
msgstr ""

#: src/for_developers/backends.md:109
msgid ""
"Notably, this means if you want to add your own custom backend you'll also "
"need to make sure to add the HTML backend, even if its table just stays "
"empty."
msgstr ""

#: src/for_developers/backends.md:112
msgid ""
"Now you just need to build your book like normal, and everything should "
"_Just Work_."
msgstr ""

#: src/for_developers/backends.md:115
msgid ""
"```shell\n"
"$ mdbook build\n"
"...\n"
"2018-01-16 07:31:15 [INFO] (mdbook::renderer): Invoking the \"mdbook-"
"wordcount\" renderer\n"
"mdBook: 126\n"
"Command Line Tool: 224\n"
"init: 283\n"
"build: 145\n"
"watch: 146\n"
"serve: 292\n"
"test: 139\n"
"Format: 30\n"
"SUMMARY.md: 259\n"
"Configuration: 784\n"
"Theme: 304\n"
"index.hbs: 447\n"
"Syntax highlighting: 314\n"
"MathJax Support: 153\n"
"Rust code specific features: 148\n"
"For Developers: 788\n"
"Alternative Backends: 710\n"
"Contributors: 85\n"
"```"
msgstr ""

#: src/for_developers/backends.md:139
msgid ""
"The reason we didn't need to specify the full name/path of our `wordcount` "
"backend is because `mdbook` will try to _infer_ the program's name via "
"convention. The executable for the `foo` backend is typically called `mdbook-"
"foo`, with an associated `[output.foo]` entry in the `book.toml`. To "
"explicitly tell `mdbook` what command to invoke (it may require command-line "
"arguments or be an interpreted script), you can use the `command` field."
msgstr ""

#: src/for_developers/backends.md:159
msgid "Configuration"
msgstr ""

#: src/for_developers/backends.md:161
msgid ""
"Now imagine you don't want to count the number of words on a particular "
"chapter (it might be generated text/code, etc). The canonical way to do this "
"is via the usual `book.toml` configuration file by adding items to your "
"`[output.foo]` table."
msgstr ""

#: src/for_developers/backends.md:166
msgid ""
"The `Config` can be treated roughly as a nested hashmap which lets you call "
"methods like `get()` to access the config's contents, with a "
"`get_deserialized()` convenience method for retrieving a value and "
"automatically deserializing to some arbitrary type `T`."
msgstr ""

#: src/for_developers/backends.md:171
msgid ""
"To implement this, we'll create our own serializable `WordcountConfig` "
"struct which will encapsulate all configuration for this backend."
msgstr ""

#: src/for_developers/backends.md:174
msgid "First add `serde` and `serde_derive` to your `Cargo.toml`,"
msgstr ""

#: src/for_developers/backends.md:180
msgid "And then you can create the config struct,"
msgstr ""

#: src/for_developers/backends.md:188
msgid "\"kebab-case\""
msgstr ""

#: src/for_developers/backends.md:194
msgid ""
"Now we just need to deserialize the `WordcountConfig` from our "
"`RenderContext` and then add a check to make sure we skip ignored chapters."
msgstr ""

#: src/for_developers/backends.md:219
msgid "Output and signalling failure"
msgstr ""

#: src/for_developers/backends.md:221
msgid ""
"While it's nice to print word counts to the terminal when a book is built, "
"it might also be a good idea to output them to a file somewhere. `mdbook` "
"tells a backend where it should place any generated output via the "
"`destination` field in [`RenderContext`](https://docs.rs/mdbook-renderer/"
"latest/mdbook_renderer/struct.RenderContext.html)."
msgstr ""

#: src/for_developers/backends.md:251
msgid ""
"**Note:** There is no guarantee that the destination directory exists or is "
"empty (`mdbook` may leave the previous contents to let backends do caching), "
"so it's always a good idea to create it with `fs::create_dir_all()`."
msgstr ""

#: src/for_developers/backends.md:255
msgid ""
"If the destination directory already exists, don't assume it will be empty. "
"To allow backends to cache the results from previous runs, `mdbook` may "
"leave old content in the directory."
msgstr ""

#: src/for_developers/backends.md:259
msgid ""
"There's always the possibility that an error will occur while processing a "
"book (just look at all the `unwrap()`'s we've written already), so `mdbook` "
"will interpret a non-zero exit code as a rendering failure."
msgstr ""

#: src/for_developers/backends.md:263
msgid ""
"For example, if we wanted to make sure all chapters have an _even_ number of "
"words, erroring out if an odd number is encountered, then you may do "
"something like this:"
msgstr ""

#: src/for_developers/backends.md:298
msgid "Now, if we reinstall the backend and build a book,"
msgstr ""

#: src/for_developers/backends.md:300
msgid ""
"```shell\n"
"$ cargo install --path . --force\n"
"$ mdbook build /path/to/book\n"
"...\n"
"2018-01-16 21:21:39 [INFO] (mdbook::renderer): Invoking the \"wordcount\" "
"renderer\n"
"mdBook: 126\n"
"Command Line Tool: 224\n"
"init: 283\n"
"init has an odd number of words!\n"
"2018-01-16 21:21:39 [ERROR] (mdbook::renderer): Renderer exited with non-"
"zero return code.\n"
"2018-01-16 21:21:39 [ERROR] (mdbook::utils): Error: Rendering failed\n"
"2018-01-16 21:21:39 [ERROR] (mdbook::utils):    Caused By: The \"mdbook-"
"wordcount\" renderer failed\n"
"```"
msgstr ""

#: src/for_developers/backends.md:314
msgid ""
"As you've probably already noticed, output from the plugin's subprocess is "
"immediately passed through to the user. It is encouraged for plugins to "
"follow the \"rule of silence\" and only generate output when necessary (e.g. "
"an error in generation or a warning)."
msgstr ""

#: src/for_developers/backends.md:319
msgid ""
"All environment variables are passed through to the backend, allowing you to "
"use the usual `MDBOOK_LOG` to control logging verbosity."
msgstr ""

#: src/for_developers/backends.md:322
msgid "Wrapping up"
msgstr ""

#: src/for_developers/backends.md:324
msgid ""
"Although contrived, hopefully this example was enough to show how you'd "
"create an alternative backend for `mdbook`. If you feel it's missing "
"something, don't hesitate to create an issue in the [issue tracker](https://"
"github.com/rust-lang/mdBook/issues) so we can improve the user guide."
msgstr ""

#: src/for_developers/backends.md:329
msgid ""
"The existing backends mentioned towards the start of this chapter should "
"serve as a good example of how it's done in real life, so feel free to skim "
"through the source code or ask questions."
msgstr ""
